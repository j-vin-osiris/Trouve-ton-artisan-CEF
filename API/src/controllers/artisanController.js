const { Artisan, Specialite, Categorie } = require("../models/relations");
const { Op } = require("sequelize");

// üìç R√©cup√©rer tous les artisans avec leur sp√©cialit√© et cat√©gorie
const getAllArtisans = async (req, res) => {
  try {
    const artisans = await Artisan.findAll({
      include: [
        {
          model: Specialite,
          include: [{ model: Categorie }],
        },
      ],
    });

    res.json(artisans);
  } catch (err) {
    console.error("‚ùå Erreur r√©cup√©ration artisans :", err);
    res.status(500).json({ error: "Erreur serveur" });
  }
};

// üîç Rechercher un artisan par nom
const searchArtisanByName = async (req, res) => {
  const { name } = req.query;
  try {
    const artisans = await Artisan.findAll({
      where: {
        name: { [Op.like]: `%${name}%` },
      },
      limit: 10,
    });

    res.status(200).json(artisans);
  } catch (err) {
    console.error("‚ùå Erreur recherche artisan :", err);
    res.status(500).json({ error: "Erreur serveur" });
  }
};

// üìç R√©cup√©rer un artisan sp√©cifique par nom
const getArtisanByName = async (req, res) => {
  const { name } = req.params;

  try {
    // üîç V√©rification de la sp√©cialit√© en fonction du nom
    const artisan = await Artisan.findOne({
      where: { name },
      include: [{ model: Specialite, include: [{ model: Categorie }] }],
    });

    if (!artisan) {
      return res.status(404).json({ message: "Aucun artisan trouv√©." });
    }

    res.status(200).json(artisan);
  } catch (err) {
    console.error("‚ùå Erreur r√©cup√©ration artisan :", err);
    res.status(500).json({ error: "Erreur serveur." });
  }
};

// üìç R√©cup√©rer les artisans d'une sp√©cialit√© sp√©cifique
const getArtisansBySpecialty = async (req, res) => {
  const { name } = req.params;
  try {
    // üîç Rechercher la sp√©cialit√© par nom (sans distinction de casse)
    const specialite = await Specialite.findOne({ where: { name } });

    if (!specialite) {
      return res.status(404).json({ message: "Sp√©cialit√© non trouv√©e." });
    }

    // üî• R√©cup√©rer les artisans de cette sp√©cialit√©
    const artisans = await Artisan.findAll({
      where: { specialite_id: specialite.id },
      include: [{ model: Specialite, include: [{ model: Categorie }] }],
    });

    res.status(200).json(artisans);
  } catch (err) {
    console.error("‚ùå Erreur r√©cup√©ration artisans sp√©cialit√© :", err);
    res.status(500).json({ error: "Erreur serveur." });
  }
};

// üìç R√©cup√©rer les artisans d'une cat√©gorie sp√©cifique
const getArtisansByCategory = async (req, res) => {
  const { categoryId } = req.params;
  try {
    const artisans = await Artisan.findAll({
      include: [
        {
          model: Specialite,
          where: { category_id: categoryId },
          include: [{ model: Categorie }],
        },
      ],
    });

    if (!artisans.length) {
      return res
        .status(404)
        .json({ message: "Aucun artisan trouv√© pour cette cat√©gorie." });
    }

    res.status(200).json(artisans);
  } catch (err) {
    console.error("‚ùå Erreur r√©cup√©ration artisans cat√©gorie :", err);
    res.status(500).json({ error: "Erreur serveur." });
  }
};

// üìç R√©cup√©rer les sp√©cialit√©s d'une cat√©gorie sp√©cifique
const getSpecialtiesByCategory = async (req, res) => {
  const { categoryId } = req.params;
  try {
    const specialties = await Specialite.findAll({
      where: { category_id: categoryId },
    });

    if (!specialties.length) {
      return res
        .status(404)
        .json({ message: "Aucune sp√©cialit√© trouv√©e pour cette cat√©gorie." });
    }

    res.status(200).json(specialties);
  } catch (error) {
    console.error("‚ùå Erreur r√©cup√©ration sp√©cialit√©s :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
};

// üìç R√©cup√©rer les artisans mis en avant (top = 1)
const getFeaturedArtisans = async (req, res) => {
  try {
    console.log("üîç Ex√©cution de getFeaturedArtisans...");

    const featuredArtisans = await Artisan.findAll({
      where: { top: { [Op.eq]: 1 } },
      include: [{ model: Specialite, attributes: ["name"] }],
      order: [["rating", "DESC"]],
      limit: 3,
    });

    if (!featuredArtisans.length) {
      console.warn("‚ö†Ô∏è Aucun artisan mis en avant trouv√©.");
      return res
        .status(404)
        .json({ message: "Aucun artisan mis en avant disponible." });
    }

    console.log(
      "‚úÖ Artisans mis en avant trouv√©s :",
      JSON.stringify(featuredArtisans, null, 2)
    );
    res.status(200).json(featuredArtisans);
  } catch (err) {
    console.error("‚ùå Erreur r√©cup√©ration artisans mis en avant :", err);
    res.status(500).json({ error: "Erreur interne du serveur." });
  }
};

module.exports = {
  getAllArtisans,
  searchArtisanByName,
  getArtisanByName,
  getArtisansBySpecialty,
  getArtisansByCategory,
  getSpecialtiesByCategory,
  getFeaturedArtisans,
};
